{
  "problems": [
    {
      "id": "two_sum",
      "title": "Two Sum",
      "difficulty": "Easy",
      "tags": ["Array", "Hash Table"],
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
      "starterCode": "function solve(nums, target) {\n  // Return the indices of the two numbers that add up to target\n  // Example: solve([2,7,11,15], 9) => [0,1]\n  return [];\n}",
      "hints": [
        "Track seen values so far instead of double-looping.",
        "Store needed complement (target - x) or use a map from value to index.",
        "Aim for a single pass O(n) solution; return original indices."
      ],
      "tests": [
        {"args": [[2,7,11,15], 9], "expected": [0,1]},
        {"args": [[3,2,4], 6], "expected": [1,2]},
        {"args": [[3,3], 6], "expected": [0,1]}
      ]
    },
    {
      "id": "reverse_string",
      "title": "Reverse String",
      "difficulty": "Easy",
      "tags": ["String", "Two Pointers"],
      "description": "Write a function that reverses a string.",
      "starterCode": "function solve(s) {\n  // Return the reversed string\n  return '';\n}",
      "hints": [
        "Think two pointers: one at the start, one at the end.",
        "Strings are immutable in many languages; consider building a new array then join.",
        "Swap characters moving toward the center."
      ],
      "tests": [
        {"args": ["hello"], "expected": "olleh"},
        {"args": [""], "expected": ""},
        {"args": ["a"], "expected": "a"}
      ]
    },
    {
      "id": "fizz_buzz",
      "title": "Fizz Buzz",
      "difficulty": "Easy",
      "tags": ["Math"],
      "description": "Given an integer n, return a string array answer (1-indexed) where: answer[i] == 'FizzBuzz' if i is divisible by 3 and 5; 'Fizz' if divisible by 3; 'Buzz' if divisible by 5; or i as a string otherwise.",
      "starterCode": "function solve(n) {\n  // Return an array of strings from 1..n following FizzBuzz rules\n  return [];\n}",
      "hints": [
        "Check divisibility by both 3 and 5 first before individual checks.",
        "Build the result iteratively from 1 to n.",
        "Use modulo; keep branching simple."
      ],
      "tests": [
        {"args": [3], "expected": ["1","2","Fizz"]},
        {"args": [5], "expected": ["1","2","Fizz","4","Buzz"]},
        {"args": [1], "expected": ["1"]}
      ]
    },
    {
      "id": "valid_parentheses",
      "title": "Valid Parentheses",
      "difficulty": "Easy",
      "tags": ["Stack", "String"],
      "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
      "starterCode": "function solve(s) {\n  // Return true if parentheses are valid\n  return true;\n}",
      "hints": [
        "Use a stack to track opening brackets.",
        "Map closing to opening and check matches.",
        "String is valid if stack ends empty."
      ],
      "tests": [
        {"args": ["()"], "expected": true},
        {"args": ["()[]{}"], "expected": true},
        {"args": ["(]"], "expected": false},
        {"args": ["([)]"], "expected": false},
        {"args": ["{[]}"], "expected": true}
      ]
    },
    {
      "id": "binary_search",
      "title": "Binary Search",
      "difficulty": "Easy",
      "tags": ["Binary Search", "Array"],
      "description": "Given an array of integers nums sorted in ascending order, and an integer target, return the index of target if found; otherwise return -1.",
      "starterCode": "function solve(nums, target) {\n  // Return index of target or -1\n  return -1;\n}",
      "hints": [
        "Maintain left/right pointers.",
        "Compute mid to compare with target.",
        "Narrow the search to half each step."
      ],
      "tests": [
        {"args": [[-1,0,3,5,9,12], 9], "expected": 4},
        {"args": [[-1,0,3,5,9,12], 2], "expected": -1},
        {"args": [[1], 1], "expected": 0}
      ]
    },
    {
      "id": "max_subarray",
      "title": "Maximum Subarray",
      "difficulty": "Medium",
      "tags": ["Dynamic Programming", "Kadane"],
      "description": "Given an integer array nums, find the subarray with the largest sum and return its sum.",
      "starterCode": "function solve(nums) {\n  // Return maximum subarray sum\n  return 0;\n}",
      "hints": [
        "Track current sum and best so far.",
        "If current sum drops below 0, reset.",
        "Classic Kadane approach."
      ],
      "tests": [
        {"args": [[-2,1,-3,4,-1,2,1,-5,4]], "expected": 6},
        {"args": [[1]], "expected": 1},
        {"args": [[5,4,-1,7,8]], "expected": 23}
      ]
    },
    {
      "id": "climbing_stairs",
      "title": "Climbing Stairs",
      "difficulty": "Easy",
      "tags": ["Dynamic Programming"],
      "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can climb 1 or 2 steps. Return how many distinct ways you can climb to the top.",
      "starterCode": "function solve(n) {\n  // Return number of distinct ways\n  return 0;\n}",
      "hints": [
        "Same recurrence as Fibonacci.",
        "ways[n] = ways[n-1] + ways[n-2].",
        "Use iteration to avoid recursion overhead."
      ],
      "tests": [
        {"args": [2], "expected": 2},
        {"args": [3], "expected": 3},
        {"args": [5], "expected": 8}
      ]
    },
    {
      "id": "is_anagram",
      "title": "Valid Anagram",
      "difficulty": "Easy",
      "tags": ["Hash Table", "String"],
      "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.",
      "starterCode": "function solve(s, t) {\n  // Return true if t is an anagram of s\n  return false;\n}",
      "hints": [
        "Compare character counts for both strings.",
        "Early exit if lengths differ.",
        "Use a single map increment/decrement."
      ],
      "tests": [
        {"args": ["anagram", "nagaram"], "expected": true},
        {"args": ["rat", "car"], "expected": false},
        {"args": ["a", "a"], "expected": true}
      ]
    },
    {
      "id": "merge_sorted_arrays",
      "title": "Merge Sorted Arrays",
      "difficulty": "Easy",
      "tags": ["Two Pointers", "Array"],
      "description": "Given two sorted arrays nums1 and nums2, return a new array that is the sorted merge of both.",
      "starterCode": "function solve(nums1, nums2) {\n  // Return merged sorted array\n  return [];\n}",
      "hints": [
        "Use two pointers to traverse both arrays.",
        "Append the smaller current element, advance that pointer.",
        "Append any remaining tail at the end."
      ],
      "tests": [
        {"args": [[1,2,4],[1,3,4]], "expected": [1,1,2,3,4,4]},
        {"args": [[],[0]], "expected": [0]},
        {"args": [[-3,-1,2],[ -2, 0, 5 ]], "expected": [-3,-2,-1,0,2,5]}
      ]
    },
    {
      "id": "longest_substring_no_repeat",
      "title": "Longest Substring Without Repeating Characters",
      "difficulty": "Medium",
      "tags": ["Sliding Window", "String"],
      "description": "Given a string s, find the length of the longest substring without repeating characters.",
      "starterCode": "function solve(s) {\n  // Return the length of longest substring without repeating chars\n  return 0;\n}",
      "hints": [
        "Sliding window over the string.",
        "Track last seen index per character.",
        "Move left pointer to max of current and last seen + 1."
      ],
      "tests": [
        {"args": ["abcabcbb"], "expected": 3},
        {"args": ["bbbbb"], "expected": 1},
        {"args": ["pwwkew"], "expected": 3}
      ]
    }
  ]
}

